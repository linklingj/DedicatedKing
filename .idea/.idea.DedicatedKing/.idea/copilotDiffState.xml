<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/TitleScene/ButtonUIElement.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/TitleScene/ButtonUIElement.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;using UnityEngine.Events;&#10;using UnityEngine.EventSystems;&#10;using DG.Tweening;&#10;using Sirenix.OdinInspector;&#10;using TMPro;&#10;&#10;[HideMonoScript]&#10;[Title(&quot;Button UI Element&quot;, &quot;Customizable button with highlight animation&quot;, TitleAlignments.Centered)]&#10;public class ButtonUIElement : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler&#10;{&#10;    [BoxGroup(&quot;References&quot;)]&#10;    [LabelText(&quot;Button&quot;)]&#10;    [SerializeField] private Button button;&#10;&#10;    [BoxGroup(&quot;References&quot;)]&#10;    [LabelText(&quot;Button Text&quot;)]&#10;    [SerializeField] private TMP_Text buttonText;&#10;&#10;    [BoxGroup(&quot;Appearance&quot;)]&#10;    [LabelText(&quot;Normal Color&quot;)]&#10;    [SerializeField] [ColorPalette] private Color normalColor = Color.white;&#10;&#10;    [BoxGroup(&quot;Appearance&quot;)]&#10;    [LabelText(&quot;Highlight Color&quot;)]&#10;    [SerializeField] [ColorPalette] private Color highlightColor = Color.yellow;&#10;    &#10;    [BoxGroup(&quot;Appearance&quot;)]&#10;    [LabelText(&quot;Highlight Scale&quot;)]&#10;    [SerializeField] private float highlightScale = 1.3f;&#10;&#10;    [BoxGroup(&quot;Animation&quot;)]&#10;    [LabelText(&quot;Duration&quot;)]&#10;    [SerializeField] private float duration = 0.25f;&#10;&#10;    [BoxGroup(&quot;Animation&quot;)]&#10;    [LabelText(&quot;Ease&quot;)]&#10;    [SerializeField] private Ease ease = Ease.OutQuad;&#10;&#10;    [BoxGroup(&quot;Appearance&quot;)]&#10;    [LabelText(&quot;Normal Text Color&quot;)]&#10;    [SerializeField] private Color normalTextColor = Color.black;&#10;&#10;    [BoxGroup(&quot;Appearance&quot;)]&#10;    [LabelText(&quot;Highlight Text Color&quot;)]&#10;    [SerializeField] private Color highlightTextColor = Color.yellow;&#10;&#10;    [ReadOnly]&#10;    [ShowInInspector]&#10;    private Vector3 initialScale;&#10;&#10;    private void Awake()&#10;    {&#10;        initialScale = transform.localScale;&#10;        button = GetComponent&lt;Button&gt;();&#10;        buttonText = GetComponentInChildren&lt;TMP_Text&gt;();&#10;    }&#10;&#10;    private void OnEnable()&#10;    {&#10;        AnimateHighlight(false);&#10;    }&#10;&#10;    private void AnimateHighlight(bool on)&#10;    {&#10;        transform.DOKill();&#10;        transform.DOScale(on ? Vector3.one * highlightScale : initialScale, duration).SetEase(ease);&#10;    }&#10;&#10;    public void OnPointerEnter(PointerEventData eventData)&#10;    {&#10;        AnimateHighlight(true);&#10;    }&#10;&#10;    public void OnPointerExit(PointerEventData eventData)&#10;    {&#10;        if (EventSystem.current != null &amp;&amp; EventSystem.current.currentSelectedGameObject == gameObject)&#10;        {&#10;            AnimateHighlight(true);&#10;        }&#10;        else&#10;        {&#10;            AnimateHighlight(false);&#10;        }&#10;    }&#10;&#10;    public void OnSelect(BaseEventData eventData)&#10;    {&#10;        AnimateHighlight(true);&#10;    }&#10;&#10;    public void OnDeselect(BaseEventData eventData)&#10;    {&#10;        AnimateHighlight(false);&#10;    }&#10;&#10;    public void SetButtonText(string text)&#10;    {&#10;        if (buttonText != null)&#10;        {&#10;            buttonText.text = text;&#10;        }&#10;    }&#10;&#10;    public void SetButtonInteractable(bool interactable)&#10;    {&#10;        if (button != null)&#10;        {&#10;            button.interactable = interactable;&#10;        }&#10;    }&#10;&#10;    public void AddOnClickListener(UnityAction action)&#10;    {&#10;        if (button != null)&#10;        {&#10;            button.onClick.AddListener(action);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;using UnityEngine.Events;&#10;using UnityEngine.EventSystems;&#10;using DG.Tweening;&#10;using Sirenix.OdinInspector;&#10;using TMPro;&#10;&#10;[HideMonoScript]&#10;[Title(&quot;Button UI Element&quot;, &quot;Customizable button with highlight animation&quot;, TitleAlignments.Centered)]&#10;public class ButtonUIElement : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler&#10;{&#10;    [BoxGroup(&quot;References&quot;)]&#10;    [LabelText(&quot;Button&quot;)]&#10;    [SerializeField] private Button button;&#10;&#10;    [BoxGroup(&quot;References&quot;)]&#10;    [LabelText(&quot;Button Text&quot;)]&#10;    [SerializeField] private TMP_Text buttonText;&#10;&#10;    [BoxGroup(&quot;Appearance&quot;)]&#10;    [LabelText(&quot;Normal Color&quot;)]&#10;    [SerializeField] [ColorPalette] private Color normalColor = Color.white;&#10;&#10;    [BoxGroup(&quot;Appearance&quot;)]&#10;    [LabelText(&quot;Highlight Color&quot;)]&#10;    [SerializeField] [ColorPalette] private Color highlightColor = Color.yellow;&#10;    &#10;    [BoxGroup(&quot;Appearance&quot;)]&#10;    [LabelText(&quot;Highlight Scale&quot;)]&#10;    [SerializeField] private float highlightScale = 1.3f;&#10;&#10;    [BoxGroup(&quot;Animation&quot;)]&#10;    [LabelText(&quot;Duration&quot;)]&#10;    [SerializeField] private float duration = 0.25f;&#10;&#10;    [BoxGroup(&quot;Animation&quot;)]&#10;    [LabelText(&quot;Ease&quot;)]&#10;    [SerializeField] private Ease ease = Ease.OutQuad;&#10;&#10;    [BoxGroup(&quot;Appearance&quot;)]&#10;    [LabelText(&quot;Normal Text Color&quot;)]&#10;    [SerializeField] private Color normalTextColor = Color.black;&#10;&#10;    [BoxGroup(&quot;Appearance&quot;)]&#10;    [LabelText(&quot;Highlight Text Color&quot;)]&#10;    [SerializeField] private Color highlightTextColor = Color.yellow;&#10;&#10;    [ReadOnly]&#10;    [ShowInInspector]&#10;    private Vector3 initialScale;&#10;&#10;    private void Awake()&#10;    {&#10;        initialScale = transform.localScale;&#10;        button = GetComponent&lt;Button&gt;();&#10;        buttonText = GetComponentInChildren&lt;TMP_Text&gt;();&#10;    }&#10;&#10;    private void OnEnable()&#10;    {&#10;        AnimateHighlight(false);&#10;    }&#10;&#10;    private void AnimateHighlight(bool on)&#10;    {&#10;        if (targetImage != null)&#10;        {&#10;            targetImage.DOKill();&#10;            targetImage.DOColor(on ? highlightColor : normalColor, duration).SetEase(ease);&#10;        }&#10;        if (buttonText != null)&#10;        {&#10;            buttonText.DOKill();&#10;            buttonText.DOColor(on ? highlightTextColor : normalTextColor, duration).SetEase(ease);&#10;        }&#10;        transform.DOKill();&#10;        transform.DOScale(on ? highlightScale : normalScale, duration).SetEase(ease);&#10;    }&#10;&#10;    public void OnPointerEnter(PointerEventData eventData)&#10;    {&#10;        AnimateHighlight(true);&#10;    }&#10;&#10;    public void OnPointerExit(PointerEventData eventData)&#10;    {&#10;        if (EventSystem.current != null &amp;&amp; EventSystem.current.currentSelectedGameObject == gameObject)&#10;        {&#10;            AnimateHighlight(true);&#10;        }&#10;        else&#10;        {&#10;            AnimateHighlight(false);&#10;        }&#10;    }&#10;&#10;    public void OnSelect(BaseEventData eventData)&#10;    {&#10;        AnimateHighlight(true);&#10;    }&#10;&#10;    public void OnDeselect(BaseEventData eventData)&#10;    {&#10;        AnimateHighlight(false);&#10;    }&#10;&#10;    public void SetButtonText(string text)&#10;    {&#10;        if (buttonText != null)&#10;        {&#10;            buttonText.text = text;&#10;        }&#10;    }&#10;&#10;    public void SetButtonInteractable(bool interactable)&#10;    {&#10;        if (button != null)&#10;        {&#10;            button.interactable = interactable;&#10;        }&#10;    }&#10;&#10;    public void AddOnClickListener(UnityAction action)&#10;    {&#10;        if (button != null)&#10;        {&#10;            button.onClick.AddListener(action);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/TitleScene/TitleCamera.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/TitleScene/TitleCamera.cs" />
              <option name="originalContent" value="using DG.Tweening;&#10;using UnityEngine;&#10;&#10;public class CameraSetting {&#10;    public Vector3 position;&#10;    public Vector3 rotation;&#10;    public float fieldOfView = 60f;&#10;}&#10;&#10;public class TitleCamera : MonoBehaviour&#10;{&#10;    private Camera cam;&#10;    private void Awake() {&#10;        cam = GetComponent&lt;Camera&gt;();&#10;    }&#10;    public void ApplySetting(CameraSetting setting, float duration = 1f) {&#10;        transform.DOMove(setting.position, duration);&#10;        transform.DORotate(setting.rotation, duration);&#10;        if (cam != null) {&#10;            cam.DOFieldOfView(setting.fieldOfView, duration);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;using DG.Tweening;&#10;using Sirenix.OdinInspector;&#10;using UnityEngine;&#10;&#10;public class CameraSetting {&#10;    public Vector3 position;&#10;    public Vector3 rotation;&#10;    public float fieldOfView = 60f;&#10;}&#10;&#10;public class TitleCamera : MonoBehaviour&#10;{&#10;    private Camera cam;&#10;&#10;    [TableList]&#10;    [SerializeField]&#10;    public List&lt;StateCameraSetting&gt; stateCameraSettings = new List&lt;StateCameraSetting&gt;();&#10;    private Dictionary&lt;TitleState, CameraSetting&gt; stateToCameraSetting;&#10;&#10;    private void Awake() {&#10;        cam = GetComponent&lt;Camera&gt;();&#10;        stateToCameraSetting = new Dictionary&lt;TitleState, CameraSetting&gt;();&#10;        foreach (var item in stateCameraSettings) {&#10;            stateToCameraSetting[item.state] = item.setting;&#10;        }&#10;    }&#10;&#10;    public void SetState(TitleState state, float duration = 1f) {&#10;        if (stateToCameraSetting != null &amp;&amp; stateToCameraSetting.TryGetValue(state, out var setting)) {&#10;            ApplySetting(setting, duration);&#10;        }&#10;    }&#10;&#10;    public void ApplySetting(CameraSetting setting, float duration = 1f) {&#10;        transform.DOMove(setting.position, duration);&#10;        transform.DORotate(setting.rotation, duration);&#10;        if (cam != null) {&#10;            cam.DOFieldOfView(setting.fieldOfView, duration);&#10;        }&#10;    }&#10;}&#10;&#10;[Serializable]&#10;public class StateCameraSetting {&#10;    [TableColumnWidth(100)]&#10;    public TitleState state;&#10;    public CameraSetting setting = new CameraSetting();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/TitleScene/TitleUIManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/TitleScene/TitleUIManager.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections.Generic;&#10;using DG.Tweening;&#10;using Sirenix.OdinInspector;&#10;using UnityEngine;&#10;&#10;[Serializable]&#10;public enum TitleState {&#10;    Title,&#10;    CreateLobby,&#10;    FindLobby,&#10;    InLobby,&#10;    Options,&#10;}&#10;&#10;[Serializable]&#10;public class StateUIPair {&#10;    public TitleState state;&#10;    public GameObject ui;&#10;}&#10;&#10;public class TitleUIManager : MonoBehaviour {&#10;    [EnumToggleButtons] private TitleState state;&#10;    [SerializeField] TitleCamera titleCamera;&#10;    [SerializeField] List&lt;StateUIPair&gt; stateUIList;&#10;    [SerializeField] private float uiTransitionDuration = 0.6f;&#10;&#10;    private Dictionary&lt;TitleState, GameObject&gt; uiByState;&#10;&#10;    private void Awake()&#10;    {&#10;        uiByState = new Dictionary&lt;TitleState, GameObject&gt;();&#10;        foreach (var pair in stateUIList)&#10;        {&#10;            if (pair != null &amp;&amp; pair.ui != null)&#10;            {&#10;                uiByState[pair.state] = pair.ui;&#10;            }&#10;        }&#10;    }&#10;&#10;    private void Start()&#10;    {&#10;        state = TitleState.Title;&#10;        titleCamera.SetState(state, 0);&#10;&#10;        foreach (var ui in uiByState.Values)&#10;        {&#10;            ui.SetActive(false);&#10;            Vector3 scale = ui.transform.localScale;&#10;            scale.y = 0;&#10;            ui.transform.localScale = scale;&#10;        }&#10;&#10;        if (uiByState.TryGetValue(state, out var initialUI))&#10;        {&#10;            ShowUI(initialUI);&#10;        }&#10;    }&#10;    &#10;    public void ToTitle() =&gt; ChangeState(TitleState.Title);&#10;    public void ToCreateLobby() =&gt; ChangeState(TitleState.CreateLobby);&#10;    public void ToFindLobby() =&gt; ChangeState(TitleState.FindLobby);&#10;    public void ToInLobby() =&gt; ChangeState(TitleState.InLobby);&#10;    public void ToOptions() =&gt; ChangeState(TitleState.Options);&#10;    public void QuitGame() =&gt; Application.Quit();&#10;&#10;    [Button]&#10;    void ChangeState(TitleState newState)&#10;    {&#10;        if (state == newState) return;&#10;&#10;        state = newState;&#10;&#10;        if (titleCamera != null) {&#10;            titleCamera.SetState(newState, uiTransitionDuration);&#10;        }&#10;&#10;        // if (!uiByState.TryGetValue(newState, out GameObject targetUI))&#10;        //     return;&#10;        //&#10;        // List&lt;GameObject&gt; activeUIs = new List&lt;GameObject&gt;();&#10;        // foreach (var kvp in uiByState)&#10;        // {&#10;        //     if (kvp.Value.activeSelf)&#10;        //     {&#10;        //         activeUIs.Add(kvp.Value);&#10;        //     }&#10;        // }&#10;        //&#10;        // if (activeUIs.Count == 1 &amp;&amp; activeUIs[0] == targetUI)&#10;        //     return;&#10;        //&#10;        // int hideCount = activeUIs.Count;&#10;        // if (hideCount == 0)&#10;        // {&#10;        //     ShowUI(targetUI);&#10;        //     return;&#10;        // }&#10;        //&#10;        // foreach (var ui in activeUIs)&#10;        // {&#10;        //     HideUI(ui, () =&gt;&#10;        //     {&#10;        //         hideCount--;&#10;        //         if (hideCount == 0)&#10;        //         {&#10;        //             ShowUI(targetUI);&#10;        //         }&#10;        //     });&#10;        // }&#10;    }&#10;&#10;    void ShowUI(GameObject ui)&#10;    {&#10;        ui.SetActive(true);&#10;        Vector3 scale = ui.transform.localScale;&#10;        scale.y = 0;&#10;        ui.transform.localScale = scale;&#10;        ui.transform.DOScaleY(1f, uiTransitionDuration/2).SetEase(Ease.OutBack);&#10;    }&#10;&#10;    void HideUI(GameObject ui, Action onComplete = null)&#10;    {&#10;        ui.transform.DOScaleY(0f, uiTransitionDuration/2).SetEase(Ease.InBack).OnComplete(() =&gt;&#10;        {&#10;            ui.SetActive(false);&#10;            onComplete?.Invoke();&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;using DG.Tweening;&#10;using Sirenix.OdinInspector;&#10;using UnityEngine;&#10;&#10;[Serializable]&#10;public enum TitleState {&#10;    Title,&#10;    CreateLobby,&#10;    FindLobby,&#10;    InLobby,&#10;    Options,&#10;}&#10;&#10;[Serializable]&#10;public class StateUIPair {&#10;    public TitleState state;&#10;    public GameObject ui;&#10;}&#10;&#10;public class TitleUIManager : MonoBehaviour {&#10;    [EnumToggleButtons] private TitleState state;&#10;    [SerializeField] TitleCamera titleCamera;&#10;    [SerializeField] List&lt;StateUIPair&gt; stateUIList;&#10;    [SerializeField] private float uiTransitionDuration = 0.6f;&#10;&#10;    private Dictionary&lt;TitleState, GameObject&gt; uiByState;&#10;&#10;    private void Awake()&#10;    {&#10;        uiByState = new Dictionary&lt;TitleState, GameObject&gt;();&#10;        foreach (var pair in stateUIList)&#10;        {&#10;            if (pair != null &amp;&amp; pair.ui != null)&#10;            {&#10;                uiByState[pair.state] = pair.ui;&#10;            }&#10;        }&#10;    }&#10;&#10;    private void Start()&#10;    {&#10;        state = TitleState.Title;&#10;        titleCamera.SetState(state, 0);&#10;&#10;        foreach (var ui in uiByState.Values)&#10;        {&#10;            ui.SetActive(false);&#10;            Vector3 scale = ui.transform.localScale;&#10;            scale.y = 0;&#10;            ui.transform.localScale = scale;&#10;        }&#10;&#10;        if (uiByState.TryGetValue(state, out var initialUI))&#10;        {&#10;            ShowUI(initialUI);&#10;        }&#10;    }&#10;    &#10;    public void ToTitle() =&gt; ChangeState(TitleState.Title);&#10;    public void ToCreateLobby() =&gt; ChangeState(TitleState.CreateLobby);&#10;    public void ToFindLobby() =&gt; ChangeState(TitleState.FindLobby);&#10;    public void ToInLobby() =&gt; ChangeState(TitleState.InLobby);&#10;    public void ToOptions() =&gt; ChangeState(TitleState.Options);&#10;    public void QuitGame() =&gt; Application.Quit();&#10;&#10;    [Button]&#10;    void ChangeState(TitleState newState)&#10;    {&#10;        if (state == newState) return;&#10;&#10;        state = newState;&#10;&#10;        if (titleCamera != null) {&#10;            titleCamera.SetState(newState, uiTransitionDuration);&#10;        }&#10;&#10;        GameObject targetUI = null;&#10;        uiByState.TryGetValue(newState, out targetUI);&#10;&#10;        // 모든 UI 비활성화&#10;        foreach (var ui in uiByState.Values)&#10;        {&#10;            if (ui != null)&#10;                ui.SetActive(false);&#10;        }&#10;&#10;        // 타겟 UI가 null이면 모든 UI 비활성화 후 종료&#10;        if (targetUI == null)&#10;            return;&#10;&#10;        // 타겟 UI만 활성화&#10;        targetUI.SetActive(true);&#10;    }&#10;&#10;    void ShowUI(GameObject ui)&#10;    {&#10;        ui.SetActive(true);&#10;        Vector3 scale = ui.transform.localScale;&#10;        scale.y = 0;&#10;        ui.transform.localScale = scale;&#10;        ui.transform.DOScaleY(1f, uiTransitionDuration/2).SetEase(Ease.OutBack);&#10;    }&#10;&#10;    void HideUI(GameObject ui, Action onComplete = null)&#10;    {&#10;        ui.transform.DOScaleY(0f, uiTransitionDuration/2).SetEase(Ease.InBack).OnComplete(() =&gt;&#10;        {&#10;            ui.SetActive(false);&#10;            onComplete?.Invoke();&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>